
The compilation process of a C program involves several steps:

1. Preprocessing: In this step, the preprocessor directives (#include, #define, etc.) are processed. The preprocessor replaces these directives with actual code from the included files and performs macro substitutions.
Removes comments, substitute the header file, expands the macro name.
Preprocessed output file --> (.i) file.
command --> gcc -E filename.c

2. Compilation: The preprocessed code is then passed to the compiler, which translates the code into assembly language.
Compilation output file --> (.s) file --> Assembly code.
command --> gcc -S filename.c

3. Assembly: The assembly code generated by the compiler is then translated into machine language by the assembler.
Assembly output file --> (.o) file --> object code.
command --> gcc -c filename.c
To view the contents of the object file, you can use a disassembler like objdump. Here's the command to view the contents of filename.o --> objdump -d filename.o

4. Linking: Finally, the linker combines the object code generated by the assembler with the code for any library functions used (like printf() from stdio.h) to produce the final executable file.
Linking output file --> .out --> Linux, .exe --> Windows
To link object files and produce the final executable, you can use the following command:
gcc filename.o -o executable_name
Replace filename.o with the name of your object file, and executable_name with the name you want to give to your executable file.

Compile your program:
gcc hello.c -o hello
Run your program:
./hello
